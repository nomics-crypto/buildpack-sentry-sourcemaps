#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir=$(cd "$3/" && pwd)

for key in SENTRY_AUTH_TOKEN SENTRY_ORG SENTRY_PROJECT SENTRY_REPOSITORY; do
    [[ -f "${env_dir}/${key}" ]] && export "$key=$(cat "${env_dir}/${key}")"
    [[ -z "${!key}" ]] && echo "-----> ${key} is missing or empty: unable to continue." && exit 1
done

# Prepare what we need
JQ="${cache}/sentry-jq"
if [[ ! -f "${JQ}" ]]; then
    echo "-----> Downloading jq 1.5"
    curl -sSfL "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64" > "${JQ}"
    chmod +x "${JQ}"
fi

API="https://sentry.io/api/0/organizations/${SENTRY_ORG}"

# Create a release
echo "-----> Creating Sentry release ${SOURCE_VERSION} for organization '${SENTRY_ORG}' in project '${SENTRY_PROJECT}'"

curl -sSf "${API}/releases/" \
  -X POST \
  -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
  -H 'Content-Type: application/json' \
  -d "{\"version\": \"${SOURCE_VERSION}\", \"refs\": [{ \"commit\": \"${SOURCE_VERSION}\", \"repository\": \"${SENTRY_REPOSITORY}\" }], \"projects\": [\"${SENTRY_PROJECT}\"]}" \
  >/dev/null

# Upload the sourcemaps
cd "${build}/"

for map in $(find . -name '*.js.map' -not -path './node_modules/*' -not -path './.heroku/*' | cut -c 3-); do
    name="~/${map/.next/_next}"

    echo "       Uploading ${map} to Sentry"
    curl -sSf "${API}/releases/${SOURCE_VERSION}/files/" \
        -X POST \
        -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
        -F file=@"${map}" \
        -F name="${name}" \
        >/dev/null

    # remove sourcemap from slug
    echo "       Removing ${map} from slug"
    rm -f "${map}"
done

# Create a deploy
echo "-----> Creating Sentry deploy for ${SOURCE_VERSION}"
curl "${API}/releases/${SOURCE_VERSION}/deploys/" \
  -X POST \
  -H "Authorization: Bearer ${SENTRY_AUTH_TOKEN}" \
  -H 'Content-Type: application/json' \
  -d "{ \"environment\": \"production\" }" \
  >/dev/null

echo "       Done!"
